//
// Vertical Rhythm
//
// This is the minimal amount of code needed to create vertical rhythm in our
// CSS. If you are looking for a robust solution, look at the excellent Typey
// library. @see https://github.com/jptaranto/typey
@function normalize_rhythm($value, $relative_to: $base_font_size, $unit: $base_unit) {
    @if unit($value) != px {
        @error "The normalize vertical-rhythm module only supports px inputs. The typey library is better.";
    }
    @if $unit == rem {
        @return ($value / $base_font_size) * 1rem;
    } @else if $unit == em {
        @return ($value / $relative_to) * 1em;
    } @else {
        // $unit == px
        @return $value;
    }
}

@mixin normalize_font_size($value, $relative_to: $base_font_size) {
    @if unit($value) != 'px' {
        @error "normalize_font_size() only supports px inputs. The typey library is better.";
    }
    font-size: normalize_rhythm($value, $relative_to);
}

@mixin normalize_rhythm($property, $values, $relative_to: $base_font_size) {
    $value_list: $values;
    $sep: space;
    @if type-of($values) == 'list' {
        $sep: list-separator($values);
    } @else {
        $value_list: append((), $values);
    }
    $normalized_values: ();
    @each $value in $value_list {
        @if unitless($value) and $value != 0 {
            $value: $value * normalize_rhythm($base_line_height, $relative_to);
        }
        $normalized_values: append($normalized_values, $value, $sep);
    }
    #{$property}: $normalized_values;
}

@mixin normalize_margin($values, $relative_to: $base_font_size) {
    @include normalize_rhythm(margin, $values, $relative_to);
}

@mixin normalize_line_height($font_size, $min_line_padding: 2px) {
    $lines: ceil($font_size / $base_line_height);
    // If lines are cramped include some extra leading.
    @if ($lines * $base_line_height - $font_size) < ($min_line_padding * 2) {
        $lines: $lines + 1;
    }
    @include normalize_rhythm(line-height, $lines, $font_size);
}
